The format of storage in MongoDB(NoSQL) is in BSON.


MongoDB work in two layers –

Application Layer and
Data layer

Application Layer is also known as the Final Abstraction Layer, it has two-parts, first is a Frontend (User Interface) and the second is Backend (server). The frontend is the place where the user uses MongoDB with the help of a Web or Mobile. This web and mobile include web pages, mobile applications, android default applications, IOS applications, etc. The backend contains a server which is used to perform server-side logic and also contain drivers or mongo shell to interact with MongoDB server with the help of queries.

These queries are sent to the MongoDB server present in the Data Layer. Now, the MongoDB server receives the queries and passes the received queries to the storage engine. MongoDB server itself does not directly read or write the data to the files or disk or memory. After passing the received queries to the storage engine, the storage engine is responsible to read or write the data in the files or memory basically it manages the data.


Relational Database Management System(RDBMS) is not the correct choice when it comes to handling big data by the virtue of their design since they are not horizontally scalable. If the database runs on a single server, then it will reach a scaling limit. NoSQL databases are more scalable and provide superior performance. MongoDB is such a NoSQL database that scales by adding more and more servers and increases productivity with its flexible document model.



Features:
-----------
Indexing: Without indexing, a database would have to scan every document of a collection to select those that match the query which would be inefficient. So, for efficient searching Indexing is a must and MongoDB uses it to process huge volumes of data in very less time.

Scalability: MongoDB scales horizontally using sharding (partitioning data across various servers). Data is partitioned into data chunks using the shard key, and these data chunks are evenly distributed across shards that reside across many physical servers. Also, new machines can be added to a running database.

Replication and High Availability: MongoDB increases the data availability with multiple copies of data on different servers. By providing redundancy, it protects the database from hardware failures. If one server goes down, the data can be retrieved easily from other active servers which also had the data stored on them.


A MongoDB Database can be called as the container for all the collections. 

Collection is a bunch of MongoDB documents. It is similar to tables in RDBMS.
Document is made of fields. It is similar to a tuple in RDBMS, but it has dynamic schema here. Documents of the same collection need not have the same set of fields




mongo: The Command Line Interface to interact with the db.
mongod: This is the database. Sets up the server.
mongodump: It dumps out the Binary of the Database(BSON)
mongoexport: Exports the document to Json, CSV format
mongoimport: To import some data into the DB.
mongorestore: to restore anything that you’ve exported.
mongostat: Statistics of databases


You can use methods like count(), find(), findOne() to do some very basic queries with your document. 
db.employee.count()
db.employee.findOne()

Indexing:
---------
 You can also use indexing if your query returns more than one document. For example, db.employee_data.find() returns all the documents in the collection but if you just want the 7th one then, just do db.employee_data.find()[6] and it will return the specific document. [Note : Indexing starts from 0 here]. 
 
Projections: Let’s say for a query you want only some specific details and not the whole set of detail in the document. You can use projections for this. After your query object just make the needed fields as 1 and others would be assumed as 0 automatically. But remember that the “_id” field is always assumed to be 1 implicitly and if you don’t want to see the ugly looking “_id” field, then you need to say this in your projection by “_id : 0” 

Show the age, gender and email, but not “_id” of the employee named “Harshit Gupta”. (Assume that there is only one employee named Harshit Gupta). Usage of Projections 

> db.employee_data.find( { name: “Harshit Gupta” }, { _id:0, age:1, gender:1, email:1 } )

MongoDB:  It centers around the CAP theorem (Consistency, Availability, and Partition tolerance).	
RDBMS:  It centers around ACID properties (Atomicity, Consistency, Isolation, and Durability).

CAP:
The three letters in CAP refer to three desirable properties of distributed systems with replicated data: consistency (among replicated copies), availability (of the system for read and write operations) and partition tolerance (in the face of the nodes in the system being partitioned by a network fault). 


Disadvantages of MongoDB : 
------------------------------ 
It uses high memory for data storage.
You are not allowed to store more than 16MB data in the documents.
The nesting of data in BSON is also limited you are not allowed to nest data more than 100 levels.


Basic Queries:
-------------
show dbs     -  to get available databases
default databases are -> admin, config, and local.
For creatign DB		-  use database_name 

For Creating Collection		-  db.collection_name.insertOne({..})



In MongoDB, when the find() method is used to find the documents present in the given collection, then this method returned a pointer which will points to the documents of the collection, now this pointer is known as cursor. 

In MongoDB, the find() method return the cursor, now to access the document we need to iterate the cursor. In the mongo shell, if the cursor is not assigned to a var keyword then the mongo shell automatically iterates the cursor up to 20 documents. MongoDB also allows you to iterate cursor manually. So, to iterate a cursor manually simply assign the cursor return by the find() method to the var keyword Or JavaScript variable. 

Note: If a cursor inactive for 10 min then MongoDB server will automatically close that cursor.

Syntax:

var name = db.collection_name.find()

name

We can use loops in queries:
----------------------------------

var mycursor = db.student.find({studentId:{$gt:1}});
> while(mycursor.hasNext()){
... print(tojson(mycursor.next()));
... }
.............................................................
db.collection.find().forEach(<function>)

var mycursor = db.student.find({studentId:3}).pretty()
mycursor.forEach(printjson)
..............................................................
cursor.toArray()

var mycursor = db.student.find().pretty()
var docs = mycursor.toArray()
var resultdoc = docs[0]
resultdoc

pretty() method is used to configure the cursor to display results in an easy-to-read format.
-..........................................................................................-

db.student.find().next()
Here, the next() method return the first document from the collection.



Read	-> find()
write:
------
insertone()
insertMany()

updateone()
updateMany()
replaceone()

deleteone()
deleteMany()


Bulk Inserts:
--------------
var bulk = db.students.initializeUnorderedBulkOp();
bulk.insert( { first_name: "Sachin", last_name: "Tendulkar" } );
bulk.insert( { first_name: "Virender", last_name: "Sehwag" } );
bulk.insert( { first_name: "Shikhar", last_name: "Dhawan" } );
bulk.insert( { first_name: "Mohammed", last_name: "Shami" } );
bulk.insert( { first_name: "Shreyas", last_name: "Iyer" } );
bulk.execute();

Supports Array operators:
isArray()
size()
arrayElemAt
concatArrays
reverseArrays

String operators:
concat()
strcasecmp()
toupper
tolower


db.Collection_name.sort({“field_name.embed_field_name” : 1 or -1})
1- ascending order
-1 for descending order


db.Collection_name.sort({“field_name.embed_field_name” : 1 or -1}) - for existence of field

Capped Collections:
-----------------------
Capped collections are fixed-size collections means when we create the collection, we must fix the maximum size of the collection(in bytes) and the maximum number of documents that it can store. After creation, if we try to add more than documents to their capacity, it overwrites the existing documents. It supports high-throughput operations, that are useful when we insert and retrieve documents based on insertion order. 


db.createCollection("student", {capped:true, size:10000, max:4})
In the above example, we are working with the “gfg” database in which we are creating a new capped collection of name “student” with maximum document capacity “4” using createCollection() method.


Find the sum of ranks grouped by ages:
--------------------------------------
var map=function(){ emit(this.age,this.rank)};
var reduce=function(age,rank){ return Array.sum(rank);};
db.employee.mapReduce(map,reduce,{out :"resultCollection1"});
db.resultCollection1.find()


Upsert with findAndModify() method:
------------------------------------
We can use upsert option with findAndModify() method. In this method, the default value of this option is false. If we set the value of this option is true, then the method performs one of the following operation:

If a document or documents found that matches the given query criteria, then the findAndModify() method updates the document/documents.
If no document/documents match the given query criteria, then the findAndModify() method inserts a new document in the collection.

db.employee.findAndModify({query:{name:"Ram"}, 
                            update:{$set:{department:"Development"}},
                            upsert:true})
							
							
Indexing in MongoDB : 
-----------------------
MongoDB uses indexing in order to make the query processing more efficient. If there is no indexing, then the MongoDB must scan every document in the collection and retrieve only those documents that match the query. Indexes are special data structures that stores some information related to the documents such that it becomes easy for MongoDB to find the right data file. The indexes are order by the value of the field specified in the index. 

Creating an Index : 
MongoDB provides a method called createIndex() that allows user to create an index. 
db.COLLECTION_NAME.createIndex({KEY:1}) 

The beauty of a database lies in indexing i.e. fetching the data in a short span of time without iterating over the whole dataset. MongoDB is a NoSQL document type database that follows indexing. Indexes make searching in a collection is easier with the limited number of documents. A binary tree is the data structure used by an index. In documents, the _id field is a default index which is automatically created by MongoDB and we are not allowed to drop this index. If we try to drop this index using the dropIndexe() method it will give us an error. And the value of this field uniquely identifies a document from others. 