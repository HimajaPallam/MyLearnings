Step By Step Working 
The customer visits the portal and filters the location. To find the location we can use GPS (if it’s a mobile phone) or ISP (if it’s a laptop). Then the theatres and movies released in that theatres will be suggested to the user. Data will be provided from DB and ELK recommendation engines.
Users select the movie and check the different timing for the movies in all the nearby theatres.
Users select a particular date and time for a movie in his/her own choice of theatre. The available seat information will be fetched from the database and it will be displayed to the user.
Once the user selects the available seat, BMS locks the seat temporarily for the next 10 minutes. BMS interacts with the theatre DB and blocks the seat for the user. The ticket will be booked temporarily for the current user and for all the other users using different aggregators or apps the seat will be unavailable for the next 10 minutes. If the user is failed to book the ticket within that timeframe the seat will be released for the other aggregators.
If the user continues with the booking he/she will check the invoice with the payment option and after the payment via the payment gateway, the app server will be notified about the successful payment.
After successful payment, a unique ID will be generated by the theatre and it will be provided to the app server.
Using that unique ID a ticket will be generated with a QR code and a copy of the ticket will be shown to the user. Also, a message to the queue will be added to send the invoice copy of the ticket to the user via SMS notification or email. The ticket will have all the details such as the movie, address of the theatre, timing, theatre number, etc.
At movie time, when the customer visits the theatre the QR code will be scanned and the customer will be allowed to enter the theatre if the ID will be matched on both customer’s ticket and the theatre’s ticket.
APIs Needed 
GetListOfCities()
GetListOfEventsByCity(CityId)
GetLocationsByCity(CityId)
GetLocationsByEventandCity(cityid, eventid)
GetEventsByLocationandCity(CityId, LocationId)
GetShowTiming(eventid, locationid)
GetAvailableSeats(eventid, locationid, showtimeid)
VarifyUserSelectedSeatsAvailable(eventid, locationid, showtimeid, seats)
BlockUserSelectedSeats()
BookUserSelectedSeat()
GetTimeoutForUserSelectedSeats()
RDBMS Tables 
Place (To save the hierarchal data for any given theatre-like country, state, city, and street)
Theatre
Screen
Tier (tier of seats)
Seats
Movie
Offers
Ticket
User
Relationship Between RDBMS Tables:

One to many: Place and theatre.
One to many: Theatre and screen
One to many: Screen and Tier
One to many: Tier and seats
One to one: Screen and Movie
One to many: User and Tickets
One to many: Tickets and Seats
NoSQL Tables
There will be no relationship between these tables. 

Comments
Ratings
Movie Information
Trailers or Gallery
Artists
Cast and Crew
Reviews
Analytics Data 
Technologies Used By Bookmyshow
User Interface: ReactJS & BootStrapJS
Server language and Framework: Java, Spring Boot, Swagger, Hibernate
Security: Spring Security
Database: MySQL
Server: Tomcat
Caching: In memory cache Hazelcast.
Notifications: RabbitMQ. A Distributed message queue for push notifications.
Payment API: Popular ones are Paypal, Stripe, Square
Deployment: Docker & Ansible
Code repository: Git
Logging: Log4J
Log Management: ELK Stack
Load balancer: Nginx